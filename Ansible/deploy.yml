---
- name: Playbook to deploy tomcat
  hosts: frontend
  gather_facts: false
  tasks:
    - name: Install requirements packages.
      apt:
        name:
          - java-11-openjdk
          - curl
          - wget
          - tar
          - bash-completion
        state: present
        update_cache: true

    - name: java version.
      command: java -version
      register: java_version
      ignore_errors: true
    
    - name: Display java version.
      debug:
        var: java_version
      ignore_errors: true

    - name: Add group {{ GROUP_NAME }}
      ansible.builtin.group:
        name: "{{ GROUP_NAME }}"
        state: present

    - name: Add user {{ USER_NAME }}
      ansible.builtin.user:
        name: "{{ USER_NAME }}"
        state: present
        group: "{{ GROUP_NAME }}"

    - name: Download tomcat tar.
      ansible.builtin.get_url:
        url: "{{ URL_TOMCAT }}"
        dest: /tmp

    - name: Unarchive the file.
      ansible.builtin.unarchive:
        src: /tmp/apache-tomcat-10.1.34.tar.gz
        dest: /usr/local/tomcat10
        remote_src: yes
        owner: "{{ user_name }}"
        group: "{{ group_name }}"

    - name: Create service file for systemd.
      blockinfile:
        path: /etc/systemd/system/tomcat.service 
        create: true
        block: |
          [Unit]
          Description=Apache Tomcat Web App
          Wants=network.target
          After=network.target
          [Service]
          Type=forking
          Environment=CATALINA_PID=/usr/local/tomcat10/temp/tomcat.pid
          Environment=CATALINA_HOME=/usr/local/tomcat10
          Environment='CATALINA_OPTS=-Xms212M -Xmx512M -Djava.net.preferIPv4Stack=true'
          Environment='JAVA_OPTS=-Djava.awt.headless=true'
          ExecStart=/usr/local/tomcat10/bin/startup.sh
          ExecStop=/usr/local/tomcat10/bin/shutdown.sh
          SuccessExitStatus=143
          User=tomcat
          Group=tomcat
          UMask=0007
          RestartSec=10
          Restart=always
          [Install]
          WantedBy=multi-user.target
    
    - name: Put SELinux in permissive mode, logging actions that would be blocked.
      ansible.posix.selinux:
        policy: targeted
        state: permissive
      when: ansible_facts['distribution'] == "RedHat"

    - name: Restart service tomcat on redhat, in all cases, also issue daemon-reload to pick up config changes
      ansible.builtin.systemd_service:
        state: restarted
        daemon_reload: true
        enabled: true
        name: tomcat







    
